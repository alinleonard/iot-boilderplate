#!/usr/bin/env node

var mosca = require('mosca');
var mqttWildcard = require('./libs/mqtt_wildcard');

var pubsubsettings = {
  //using ascoltatore
  type: 'mongo',
  url: 'mongodb://localhost:27017/mqtt',
  pubsubCollection: 'iot_raw',
  mongo: {}
};

var settings = {
  port: 1883, // mqtt port
  backend: pubsubsettings	//pubsubsettings is the object we created above 
};

var server = new mosca.Server(settings);

server.on('ready', setup);

// fired when the mqtt server is ready
function setup() {
  console.log('Mosca server is up and running');
}

// fired when a client subscribes to a topic
server.on('subscribed', function(topic, client) {
  console.log('subscribed : ', topic, client);
});
 
// fired when a client subscribes to a topic
server.on('unsubscribed', function(topic, client) {
  console.log('unsubscribed : ', topic, client);
});

// fired when a client connects
server.on('clientConnected', function(client) {
    console.log('client connected', client.id);
});

// fired when a client disconnects
server.on('clientDisconnected', function(client) {
	console.log('Client Disconnected:', client.id);
});

// fired when a message is received
// https://github.com/hobbyquaker/mqtt-wildcard
server.on('published', function(packet, client) {
	console.log('Published', packet.topic, packet.payload);
	var events = mqttWildcard(packet.topic, 'devices/+/events/+');
	if(events != null && events[0] != null){
		var device_id = events[0];
		// convert to JSON
		var stringBuf = packet.payload.toString('utf-8');
        var obj = JSON.parse(stringBuf);
		console.log("Received: ", device_id, obj);
	}
});
